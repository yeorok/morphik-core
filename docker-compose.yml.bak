x-ollama-check: &ollama-check
  # 외부 Ollama 서버 연결 상태 체크
  command: >
    /bin/sh -c '
    if wget --quiet --tries=1 --timeout=5 --spider http://nicemso.ipdisk.co.kr:11434/api/tags; then
      echo "External Ollama server is accessible";
    else
      echo "Warning: External Ollama server is not accessible";
    fi'

services:
  config-check:
    image: alpine
    volumes:
      - ./morphik.toml:/morphik.toml
    <<: *ollama-check

  morphik:
    build: .
    restart: unless-stopped  # 재부팅시 자동 재시작
    ports:
      - "8000:8000"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - POSTGRES_URI=${POSTGRES_URI:-postgresql+asyncpg://morphik:morphik@postgres:5432/morphik}
      - PGPASSWORD=${POSTGRES_PASSWORD:-morphik}
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - USE_FAST_TOKENIZER=true
      - TRANSFORMERS_USE_FAST=true
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./morphik.toml:/app/morphik.toml
      - huggingface_cache:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      config-check:
        condition: service_completed_successfully
    networks:
      - morphik-network
    env_file:
      - .env

  worker:
    build:
      context: .
      dockerfile: dockerfile
    restart: unless-stopped  # 재부팅시 자동 재시작
    command: arq core.workers.ingestion_worker.WorkerSettings
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - POSTGRES_URI=${POSTGRES_URI:-postgresql+asyncpg://morphik:morphik@postgres:5432/morphik}
      - PGPASSWORD=${POSTGRES_PASSWORD:-morphik}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./morphik.toml:/app/morphik.toml
      - huggingface_cache:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      config-check:
        condition: service_completed_successfully
    networks:
      - morphik-network
    env_file:
      - .env

  redis:
    image: redis:7-alpine
    restart: unless-stopped  # 재부팅시 자동 재시작
    ports:
      - "${REDIS_PORT:-6379}:${REDIS_PORT:-6379}"  
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - morphik-network

  postgres:
    build:
      context: .
      dockerfile: postgres.dockerfile
    shm_size: 128mb
    restart: unless-stopped  # 재부팅시 자동 재시작    
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-morphik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-morphik}
      - POSTGRES_DB=${POSTGRES_DB:-morphik}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --locale=C}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-morphik} -d ${POSTGRES_DB:-morphik}"]
      #  test: ["CMD-SHELL", "pg_isready -U morphik -d morphik"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - morphik-network

  # ===========================================
  # Grafana (모니터링 대시보드)
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped  # 재부팅시 자동 재시작
    ports:
      - "3000:3000"  # Grafana 웹 인터페이스
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - morphik-network


networks:
  morphik-network:
    driver: bridge

volumes:
  postgres_data:
  huggingface_cache:
  redis_data:
  grafana_data:
